name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
    paths-ignore:
      - "docs/**"
      - "README.md"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  HEASARC_CHANNEL: "https://heasarc.gsfc.nasa.gov/FTP/software/conda"

jobs:
  download:
    name: Download Xspec Model Data
    runs-on: ubuntu-latest
    outputs:
      data-fn: ${{ steps.get_info.outputs.fn }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest

      - name: Install Utils
        run: |
          sudo apt-get install -y aria2 jq

      - name: Get Latest Version of Xspec Model Data
        id: get_info
        run: |
          get_latest_pkg() {
            jq '
              .result.pkgs
              | sort_by(
                  (
                    .version | split(".") | map(tonumber) + [0, 0]
                  )[0:3]
                  + [.build_number]
                )
              | .[-1]
            '
          }

          data_pkg=$(mamba search xspec-data -c $HEASARC_CHANNEL --json | get_latest_pkg)
          version=$(echo $data_pkg | jq -r '.version')
          build=$(echo $data_pkg | jq -r '.build_string')
          url=$(echo $data_pkg | jq -r '.url')
          fn=$(echo $data_pkg | jq -r '.fn')
          echo "VERSION=$version" >> "$GITHUB_ENV"
          echo "BUILD=$build" >> "$GITHUB_ENV"
          echo "URL=$url" >> "$GITHUB_ENV"
          echo "FN=$fn" >> "$GITHUB_ENV"
          echo "fn=$fn" >> "$GITHUB_OUTPUT"

      - name: Download Xspec Model Data ${{ env.VERSION }} (Build ${{ env.BUILD }})
        run: |
          aria2c -x 16 -s 16 --show-console-readout=true "$URL"
          if [ ! -f "$FN" ]; then
            echo "Failed to download from $URL"
            exit 1  # Exit with a non-zero status to fail the job
          fi

      - name: Upload Xspec Model Data as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FN }}
          path: ${{ env.FN }}
          retention-days: 1

  tests:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: download
    strategy:
      matrix:
        include:
          - name: Tests (Python 3.12 in Linux-x86_64)
            os: "ubuntu-latest"
            python-version: "3.12"
            uv-resolution: "highest"

          - name: Tests (Python 3.12 in macOS-arm64)
            os: "macos-latest"
            python-version: "3.12"
            uv-resolution: "highest"

          - name: Tests (Lowest Version Deps)
            os: "ubuntu-latest"
            python-version: "3.9"
            uv-resolution: "lowest-direct"
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Xspec Model Data
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.download.outputs.data-fn }}

      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: ${{ matrix.python-version }}

      - name: Install Xspec
        run: |
          mamba install xspec -c $HEASARC_CHANNEL -c conda-forge -y
          conda install --use-local ${{ needs.download.outputs.data-fn }} -y

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install Python Dependencies
        run: |
          uv pip compile pyproject.toml \
            --output-file requirements.txt \
            --resolution ${{ matrix.uv-resolution }} \
          uv pip install ".[test]" --overrides requirements.txt --verbose

      - name: Run Tests
        run: |
          pytest

      - name: Upload Coverage Results
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

  build:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          python-version: "3.12"

      - name: Install Xspec
        run: |
          mamba install xspec -c $HEASARC_CHANNEL -c conda-forge -y

      - name: Install Python Dependencies
        run: |
          pip install -U build twine

      - name: Build and Check Source Distribution
        run: |
          python -m build --sdist .
          python -m twine check --strict dist/*

      - name: Upload Source Distribution as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: xspex
          path: dist/*

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: PyPI
      url: https://pypi.org/p/xspex
    permissions:
      id-token: write
    steps:
      - name: Download Source Distribution
        uses: actions/download-artifact@v4
        with:
          name: xspex
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
